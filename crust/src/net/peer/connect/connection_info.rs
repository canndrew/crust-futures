// Copyright 2016 MaidSafe.net limited.
//
// This SAFE Network Software is licensed to you under (1) the MaidSafe.net Commercial License,
// version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
// licence you accepted on initial access to the Software (the "Licences").
//
// By contributing code to the SAFE Network Software, or to this project generally, you agree to be
// bound by the terms of the MaidSafe Contributor Agreement.  This, along with the Licenses can be
// found in the root directory of this project at LICENSE, COPYING and CONTRIBUTOR.
//
// Unless required by applicable law or agreed to in writing, the SAFE Network Software distributed
// under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.
//
// Please review the Licences for the specific language governing permissions and limitations
// relating to use of the SAFE Network Software.

use priv_prelude::*;

/// Contact info generated by a call to `Service::prepare_contact_info`.
#[derive(Debug)]
pub struct PrivConnectionInfo<UID> {
    #[doc(hidden)]
    pub id: UID,
    #[doc(hidden)]
    pub for_direct: Vec<SocketAddr>,
    #[doc(hidden)]
    pub for_hole_punch: Vec<SocketAddr>,
    #[doc(hidden)]
    pub hole_punch_socket: Option<TcpBuilder>,
}

/// Contact info used to connect to another peer.
#[derive(Debug, Serialize, Deserialize)]
pub struct PubConnectionInfo<UID> {
    #[doc(hidden)]
    pub id: UID,
    #[doc(hidden)]
    pub for_hole_punch: Vec<SocketAddr>,
    #[doc(hidden)]
    pub for_direct: Vec<SocketAddr>,
}

impl<UID: Uid> PubConnectionInfo<UID> {
    /// Returns the `UID` of the node that created this connection info.
    pub fn id(&self) -> UID {
        self.id
    }
}

impl<UID: Uid> PrivConnectionInfo<UID> {
    /// Use private connection info to create public connection info that can be shared with the
    /// peer.
    pub fn pub_connection_info(&self) -> PubConnectionInfo<UID> {
        PubConnectionInfo {
            for_hole_punch: self.for_hole_punch.clone(),
            for_direct: self.for_direct.clone(),
            id: self.id,
        }
    }

    /*
    pub fn connect(self, their_info: PubConnectionInfo) -> BoxFuture<Peer<UID>, ConnectError> {
        let try = || {
            let our_id = self.id;
            let their_id = their_info.id;

            if self.id == their_id {
                return Err(ConnectError::RequestedConnectToSelf);
            }

            let mut their_direct = their_info.for_direct;
            let mut their_hole_punch = their_info.for_hole_punch;
            if let Some(ref whitelisted_node_ips) = self.config.read().whitelisted_node_ips {
                their_direct = {
                    their_direct
                    .drain(..)
                    .filter(|s| whitelisted_node_ips.contains(&s.ip()))
                    .collect()
                };

                their_hole_punch = {
                    their_hole_punch
                    .drain(..)
                    .filter(|s| whitelisted_node_ips.contains(&s.ip()))
                    .collect()
                };
            }

            let direct_connections = {
                let connectors = {
                    their_direct
                    .into_iter()
                    .map(|addr| TcpStream::connect(&addr, handle))
                    .collect()
                };
                stream::futures_unordered(connectors)
            };

            let connections = if let Some(listen_socket) = self.hole_punch_socket {
                let hole_punch_connections = nat::tcp_hole_punch(listen_socket, their_hole_punch)?;
                direct_connections
                .hole_punch_connections
                .into_boxed()
            } else {
                direct_connections
                .into_boxed()
            };

            connections
            .and_then(|stream| Socket::wrap(stream))
            .and_then(|socket| {
                socket.send(HandshakeMessage::Connect(our_uid, our_name_hash));
                socket.into_future()
            })
            .and_then(|(msg_opt, socket)| {
                match msg_opt {
                    None => Err(ConnectError::ConnectionDropped),
                    Some(HandshakeMessage::Connect(their_uid_recv, their_name_hash)) => {
                        if their_id_recv != their_id {
                            return Err();
                        }
                        if their_name_hash != name_hash {
                            return Err();
                        }
                        Ok()
                    },
                }
            })
            

        }

    }
    */
}

